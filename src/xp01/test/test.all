// equality

.eq a, a

// laws of disjunction up to syntactic equality

.eq a\/false, a
.eq a\/a, a
.p a\/true
.p a\/~a

// laws of conjunction up to syntactic equality

.eq a/\false, false
.eq a/\a, a
.eq a/\true, a
.eq a/\~a, false
.r

// success

a
.p a
.r

// negation 1

a
.eq ~a, false
.r

// negation 2

~a
.eq a, false
.r

// conjunction introduction

a
b
.p a/\b
.r

// conjunction elimination

a/\b
.p a
.p b
.r

// disjunction introduction 1

a
.p a\/b
.r

// disjunction introduction 2

b
.p a\/b
.r

// disjunction elimination 1

a\/b
~a\/c
~b\/c
.p c
.r

// disjunction elimination 2

~a\/c
~b\/c
a\/b
.p c
.r

// modus ponens 1

a
~a\/c
.p c
.r

// modus ponens 2

~a\/c
a
.p c
.r

// modus ponens-like 1

a /\ (~a\/c)
.p c
.r

// modus ponens-like 2

(~a\/c) /\ a
.p c
.r

// modus tollens 1

~c
~a\/c
.p ~a
.r

// modus tollens 2

~a\/c
~c
.p ~a
.r

// composition-like 1

a
((~a\/b)/\(~a\/c))
.p b/\c

// composition-like 2

((~a\/b)/\(~a\/c))
a
.p b/\c


.summary
