XP04 {

	Module = ListOf<Term, #semicolon> #semicolon?

	Term = Fn // Typing

	// Typing =
	// 	| Term ":" Fn -- default
	// 	| Fn	
	
	Fn =
		| NonemptyListOf<Seq, "->"> -- default

	Seq =
		| NonemptyListOf<Primary, #space?> -- default

	Primary =
		| Parens
		| Literal
		| Symbol
		| SymbolType

	Parens = "(" Term ")"

	Literal =
		| true
		| false

	Symbol = identifier

	SymbolType = symbol

	// lexer

	true = "true" ~ identifierPart
	false = "false" ~ identifierPart

	space := "\t" | " " | "\n" | "\r" | comment
	spaceInline = "\t" | " " | commentInline

	comment = blockComment | lineEndComment
	commentInline = blockCommentInline | lineEndComment

	blockComment = "/*" (~"*/" any)* "*/"
	blockCommentInline = "/*" (~("*/" | "\n" | "\r") any)* "*/"
	lineEndComment = "//" (~("\n" | "\r") any)*

	semicolon =
		| space* (";" | end)
		| spaceInline* ("\r" | "\n" | end)

	comma =
		| space* ("," | end)
		| spaceInline* ("\r" | "\n" | end)

	identifier = identifierStart identifierPart*
	identifierStart = "A".."Z" | "a".."z" | "_" | "$"
	identifierPart = identifierStart | digit
	
	symbol = "`" symbolCharacter* "`"
	symbolCharacter = ~("`" | "\\" | "\u0000".."\u001f") any
}
